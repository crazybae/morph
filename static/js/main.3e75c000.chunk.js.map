{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["availableNetworks","contractInfo","maticNetworkParams","chainId","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","getElem","elemId","document","getElementById","App","state","loaded","noCardInfo","componentDidMount","a","window","ethereum","startApp","watchChainAccount","accounts","length","connectWallet","includes","networkId","switchToRootChain","provider","ethers","providers","Web3Provider","getNetwork","signer","getSigner","getAddress","account","morphedCardInstance","Contract","MorphedCardAddress","MorphedCardABI","abi","setState","console","log","alert","error","request","method","params","code","on","getTokenId","tokenId","parseInt","value","isNaN","undefined","getDefaultCardInfo","selectedTokenId","tokenURI","tokenInfoBase64","jsonInfo","JSON","parse","atob","substring","innerHTML","image","getCustomizedCardInfo","customizedBgImageURI","customizedFontColor","customizedTokenURI","customizedTokenInfoBase64","customizedJsonInfo","customizedImage","this","className","id","class","Network","MainCardAddress","type","Button","onClick","align","for","placeholder","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e75c000.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport MorphedCardABI from \"./contracts/MorphedCard.json\";\nimport { ethers } from \"ethers\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport \"./css/Morph.css\"\n\nconst availableNetworks = [137]; // polygon\nconst contractInfo = {\n  137:{\n    \"Network\": \"Matic Polygon\",\n    \"MainCardAddress\": '0x27A3e1e71B6f4C8f388e55C01c8Bb49139492071',\n    \"MorphedCardAddress\": '0xc1cfFff32d4b9b9b73C1D78463b5285Ad8D0dd45',\n  },\n};\n\nconst maticNetworkParams = {\n  chainId: \"0x\" + availableNetworks[0].toString(16), // A 0x-prefixed hexadecimal string\n  chainName: \"Matic Polygon Mainnet\",\n  nativeCurrency: {\n    name: \"Matic Token\",\n    symbol: \"MATIC\", // 2-6 characters long\n    decimals: 18,\n  },\n  rpcUrls: [\"https://polygon-rpc.com/\"],\n  blockExplorerUrls: [\"https://polygonscan.com\"],\n};\n\n\nfunction getElem(elemId) {\n  return document.getElementById(elemId);\n}\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    chainId: 0,\n    noCardInfo: true,\n  };\n\n  componentDidMount = async () => {\n    if (typeof window.ethereum === 'undefined') {\n      return <div>You need an ethereum wallet extention to play this game ...</div>;\n    }\n    await this.startApp();\n    await this.watchChainAccount();\n  };\n\n  startApp = async () => {\n    try {\n      if ( !this.accounts || this.accounts.length === 0 ) {\n        await this.connectWallet();\n      }\n      if ( !availableNetworks.includes(this.networkId) ) {\n        await this.switchToRootChain();\n      }\n      this.provider = new ethers.providers.Web3Provider(window.ethereum);\n      this.networkId = (await this.provider.getNetwork()).chainId;\n      this.signer = this.provider.getSigner();\n      this.account = await this.signer.getAddress();\n\n      this.morphedCardInstance = new ethers.Contract(\n        contractInfo[this.networkId].MorphedCardAddress, MorphedCardABI.abi, this.signer);\n\n      this.setState({\n        chainId: this.networkId,\n        loaded: true,\n      });\n\n    } catch (error) {\n      console.log(error);\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  connectWallet = async () => {\n    this.accounts = await window.ethereum\n        .request({method: 'eth_requestAccounts'});\n  }\n\n  switchToRootChain = async () => {\n    try {\n      await ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x'+availableNetworks[0].toString(16) }],\n      });\n\n    } catch (switchError) {\n      if (switchError.code === 4902) {\n        try {\n          await ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [maticNetworkParams],\n          });\n        } catch (addError) {\n          console.log(addError);\n        }\n      }\n    }\n  };\n  \n  watchChainAccount = async () => {\n    window.ethereum.on(\"chainChanged\", (chainId) => {\n      alert(\"Network changed to \" + chainId);\n    });\n    window.ethereum.on(\"disconnect\", (error) => {\n      alert(\"Disconnected from network\");\n    });      \n  }\n\n  getTokenId = () => {\n    var tokenId = parseInt(getElem(\"tokenId\").value);\n\n    if (isNaN(tokenId) || tokenId === undefined || tokenId < 0) {\n      alert(\"Input correct token ID\");\n      return -1;\n    }\n    return tokenId;\n  }\n\n  getDefaultCardInfo = async () => {\n    if ( !availableNetworks.includes(this.networkId) ) {\n      alert(\"Wrong network. Please change the network into \" + availableNetworks);\n      return;\n    }\n\n    var selectedTokenId = this.getTokenId();\n    if (selectedTokenId === -1) {\n      return;\n    } \n\n    try {\n      var tokenInfoBase64 = await this.morphedCardInstance.tokenURI(selectedTokenId);\n      var jsonInfo = JSON.parse(atob(tokenInfoBase64.substring(29)));\n\n      getElem(\"tokenInfo\").innerHTML = `${jsonInfo.name}<br /><img src=\"${jsonInfo.image}\" height=\"500\" />`;\n\n      this.setState({\n        noCardInfo: false,\n      });\n\n    } catch (error) {\n      getElem(\"tokenInfo\").innerHTML = \"<p>No SquidGameCard having token ID \" + selectedTokenId +\"<p>\"+ error\n    }\n  }\n  \n  getCustomizedCardInfo = async () => {\n    if ( !availableNetworks.includes(this.networkId) ) {\n      alert(\"Wrong network. Please change the network into \" + availableNetworks);\n      return;\n    }\n\n    var selectedTokenId = this.getTokenId();\n    if (selectedTokenId === -1) {\n      return;\n    } \n\n    try {\n      var customizedBgImageURI = getElem(\"bgImageURI\").value;\n      var customizedFontColor = getElem(\"fontColor\").value;\n      var customizedTokenInfoBase64 = await this.morphedCardInstance.customizedTokenURI(selectedTokenId, customizedBgImageURI, customizedFontColor);\n      var customizedJsonInfo = JSON.parse(atob(customizedTokenInfoBase64.substring(29)));\n      var customizedImage = atob(customizedJsonInfo.image.substring(26));\n\n      getElem(\"morphedTokenInfo\").innerHTML = \"<p>\" + customizedImage;\n    } catch (error) {\n      getElem(\"morphedTokenInfo\").innerHTML = \"<p>No SquidGameCard having token ID \" + selectedTokenId +\"<p>\"+ error\n    }\n  }\n\n  render() {\n\n    if (!this.state.loaded) {\n      return <div>Change your wallet network into Matic Polygon and press F5 ...</div>;\n    }\n    return (\n\n      <div className=\"App\">\n\n        <div id=\"mainbanner\">\n          <h1>Morphed Squid Game Card</h1>\n        </div>\n\n        <div id=\"content\" class=\"padding\">\n          <ul class=\"info\">\n            <li>\n              <p>Current network ID</p>\n              <span>{ contractInfo[this.state.chainId].Network } (Chain ID {this.state.chainId})</span>\n            </li>\n            <li>\n              <p>Squid Game Card<br />contract address</p>\n              <span>{ contractInfo[this.state.chainId].MainCardAddress }</span>\n            </li>\n            <li>\n              <p>Morphed Card<br />contract address</p>\n              <span>{ contractInfo[this.state.chainId].MorphedCardAddress }</span>\n            </li>\n          </ul>\n\n          <div class=\"cardNum_wrap marginBottom\">\n            <h2> Input card number</h2>\n            <span>(token ID)</span>\n            <input type=\"text\" id=\"tokenId\"></input>\n            <p><Button onClick={this.getDefaultCardInfo} >Get Squid Game Card Info</Button></p>\n            <div id=\"tokenInfo\" class=\"marginBottom padding\" align=\"center\"></div>\n          </div>\n    \n        </div>\n\n        <div class=\"tokenInfo_wrap marginBottom padding\">\n\n          <h2>Input your favorite font color and background image URL</h2>\n          <ul>\n            <li>\n              <label for=\"fontColor\">Font Color</label>\n              <input type=\"text\" id=\"fontColor\" placeholder=\"#FF9E2C\"></input>\n            </li>\n            <li>\n              <label for=\"bgImageURI\">Background Image URL</label>\n              <input type=\"text\" id=\"bgImageURI\" placeholder=\"https://gosquidgame.com/image.png\"></input>\n            </li>\n            <li>\n              <span>e.g., #FF9E2C<br />https://cdn.arstechnica.net/wp-content/uploads/2020/05/Redstone_Golem_Approaching.png</span>\n            </li>\n          </ul>\n\n          <p><Button onClick={this.getCustomizedCardInfo} >Get Morphed Card Image</Button></p>\n\n          <div id=\"morphedTokenInfo\" class=\"marginBottom padding\"></div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}